"""
Django settings for composeexample project.

Generated by 'django-admin startproject' using Django 1.11.9.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import configparser

# from composeexample.local_settings import *

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

locals_ini = [
    os.path.join(BASE_DIR, 'resources','default.ini'),
    os.path.join('etc', 'composeexample', 'default.ini'),
    os.path.join(BASE_DIR, 'resources','local.ini'),
    os.path.join('etc', 'composeexample', 'local.ini'),
]
config = configparser.ConfigParser()
config.optionxform = str
for local_ini in locals_ini:
    if os.path.isfile(local_ini):
        config.read(local_ini)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config['global'].get('SECRET_KEY', '()w5g$ei8xobl5ka1ehmcu22z#4h=*7zc&oip6&e(*=k#ew0p1')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_crontab',
    'myapp',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'composeexample.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'composeexample.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': config['global']['POSTGRES_PASSWORD'],
        'HOST': 'db',
        'PORT': 5432,
    }
}
# if you run the server outside of the docker-compose, you have to say where is the host db. Please run as root this:
# echo "127.0.0.1    db">>/etc/hosts


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, '.static')
STATIC_URL = config['global']['STATIC_URL'] + '/'
MEDIA_ROOT = os.path.join(BASE_DIR, '.media')
MEDIA_URL = config['global']['MEDIA_URL'] + '/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

# django-crontab
CRONJOBS = [
    ('0 4 * * *', 'django.core.management.call_command', ['clearsessions']),
]
CRONTAB_LOCK_JOBS = True
CRONTAB_COMMAND_SUFFIX = '>> /var/log/apache2/django-crontab.log'

# from local_settings import *
